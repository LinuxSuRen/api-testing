name: Release

on:
  push:
    tags:
      - "*"
    branches:
      - master

env:
  REGISTRY: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_ALIYUN: registry.aliyuncs.com
  IMAGE_NAME: ${{ github.repository }}

jobs:
  goreleaser:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Unshallow
        run: git fetch --prune --unshallow
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: console/atest-ui/package-lock.json
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2.9.1
        with:
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_SECRETS }}

  Test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Unit Test
        run: |
          make test
      - name: Report
        if: github.actor == 'linuxsuren'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial --force-coverage-parser go -r coverage.out
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final

  image:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Set output
        id: vars
        run: echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PUBLISH_SECRETS }}
      - name: Log into registry ${{ env.REGISTRY_DOCKERHUB }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: linuxsuren
          password: ${{ secrets.DOCKER_HUB_PUBLISH_SECRETS }}
      - name: Log into registry ${{ env.REGISTRY_ALIYUN }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.REGISTRY_ALIYUN_USER }}
          password: ${{ secrets.REGISTRY_ALIYUN_PUBLISH_SECRETS }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: |
            ${{ env.REGISTRY }}/linuxsuren/api-testing
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_ALIYUN }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: VERSION=${{ steps.vars.outputs.tag }}
      - name: Release Helm
        run: |
          echo ${{ secrets.DOCKER_HUB_PUBLISH_SECRETS }} | helm registry login docker.io -u linuxsuren --password-stdin
          export APP_VERSION=${{ steps.vars.outputs.tag }}
          export HELM_VERSION=${{ steps.vars.outputs.tag }}
          if [[ ! "$line" =~ ^v ]]
          then
            unset APP_VERSION
            unset HELM_VERSION
          fi
          make helm-pkg helm-push

  BuildDesktop:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      # for fixing Error: Cannot find module 'appdmg'
      - name: Install Python 3.11.4
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'
      - name: Upload to Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_SECRETS }}
        if: github.ref == 'refs/heads/master'
        run: |
          cd console/atest-desktop
          export TAG=$(gh release list -L 1 | awk '{print $4}')
          export TAG=${TAG#"v"}
          jq '.version = env.TAG' package.json > package.json.new && mv package.json.new package.json
          npm run publish
      - name: Upload
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_SECRETS }}
        if: github.ref != 'refs/heads/master'
        run: |
          cd console/atest-desktop
          export TAG=$(git describe --tags --abbrev=0)
          export TAG=${TAG#"v"}
          jq '.version = env.TAG' package.json > package.json.new && mv package.json.new package.json
          npm run publish

  # image-operator:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Setup Docker buildx
  #       uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf
  #     - name: Log into registry ${{ env.REGISTRY }}
  #       if: github.event_name != 'pull_request'
  #       uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GH_PUBLISH_SECRETS }}
  #     - name: Extract Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
  #       with:
  #         images: ${{ env.REGISTRY }}/linuxsuren/api-testing-operator
  #     - name: Build and push Docker image
  #       id: build-and-push
  #       uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
  #       with:
  #         context: operator
  #         push: ${{ github.event_name != 'pull_request' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         platforms: linux/amd64,linux/arm64
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max
