name: Build

on:
  - pull_request
env:
  IMG_TOOL: docker

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  Test:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Unit Test
        run: |
          make test build-ui test-ui
      - name: Long Test
        run: |
          make testlong
      - name: Lint Helm
        run: |
          make helm-pkg helm-lint
      - name: Report
        if: github.actor == 'linuxsuren'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial --force-coverage-parser go -r coverage.out
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial console/atest-ui/coverage/clover.xml
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final

  APITest:
    permissions:
      pull-requests: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: API Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          make build copy
          sudo atest service install
          sudo atest service restart
          sudo atest service status
          
          # make test-ui-e2e

          atest run -p .github/testing/grpc.yaml --request-ignore-error --report github --report-file bin/report.json --report-github-repo linuxsuren/api-testing --report-github-pr ${{ github.event.number }}
          sudo atest service status
          sudo atest service stop
          sudo atest service uninstall

          atest convert -p .github/testing/core.yaml --converter jmeter -t sample.jmx
      - name: Run JMeter Tests
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: sample.jmx

  Build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_SECRETS }}
        with:
          version: '~> v2'
          args: release --clean --snapshot

  E2E:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Set output
        id: vars
        run: echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
      - name: Package Helm
        run: |
          export APP_VERSION=${{ steps.vars.outputs.tag }}
          export HELM_VERSION=${{ steps.vars.outputs.tag }}
          if [[ ! "$line" =~ ^v ]]
          then
            unset APP_VERSION
            unset HELM_VERSION
          fi
          make helm-pkg
      - name: Core Image
        run: GOPROXY=direct IMG_TOOL=docker TAG=master REGISTRY=ghcr.io make image
      - name: Run e2e
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ github.event.number }}
        run: |
          sudo curl -L https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod u+x /usr/local/bin/docker-compose
          make test-e2e
      - name: Code Generator Test
        run: cd e2e/code-generator && ./start.sh

  BuildEmbedUI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: console/atest-ui/package-lock.json
      - name: Build
        run: |
          make build-embed-ui copy
          sudo atest service install
          sudo atest service restart
      - name: Test
        run: make test-ui

  BuildDesktop:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, macos-13]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b  # v4.1.4
      - uses: ./tools/github-actions/setup-deps
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
      # for fixing Error: Cannot find module 'appdmg'
      - name: Install Python 3.11.4
        uses: actions/setup-python@v4
        with:
          python-version: '3.11.4'
      - name: Build Desktop on Windows
        if: runner.os == 'Windows'
        env:
          BINARY: atest.exe
        run: |
          make desktop-package desktop-make
      - name: Build Desktop
        if: runner.os != 'Windows'
        run: |
          make desktop-package desktop-make desktop-test
      - name: Test extension cmd
        run: |
          ./console/atest-desktop/atest extension git
