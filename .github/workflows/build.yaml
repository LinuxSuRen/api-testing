name: Build

on:
  - pull_request
env:
  IMG_TOOL: docker

jobs:
  Test:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: Unit Test
        run: |
          make test-all-backend test-operator
      - name: Long Test
        run: |
          make testlong
      - name: Lint Helm
        run: |
          make helm-package helm-lint
      - name: Report
        if: github.actor == 'linuxsuren'
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
        run: |
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report --partial --force-coverage-parser go -r coverage.out
          bash <(curl -Ls https://coverage.codacy.com/get.sh) final

  APITest:
    permissions: 
      pull-requests: write 
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: API Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TOOLEXEC= make build copy
          sudo atest service install
          sudo atest service restart
          sudo atest service status
          
          # make test-ui-e2e

          atest run -p '.github/testing/*.yaml' --request-ignore-error --report github --report-file bin/report.json --report-github-repo linuxsuren/api-testing --report-github-pr ${{ github.event.number }}
          sudo atest service status
          sudo atest service stop
          sudo atest service uninstall

          atest convert -p .github/testing/core.yaml --converter jmeter -t sample.jmx
      - name: Run JMeter Tests
        uses: rbhadti94/apache-jmeter-action@v0.5.0
        with:
          testFilePath: sample.jmx

  Build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PUBLISH_SECRETS }}
        with:
          version: latest
          args: release --skip-publish --rm-dist --snapshot
      - name: Operator
        run: cd operator && make build

  BuildImage:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: Set output
        id: vars
        run: echo "tag=$(git describe --tags)" >> $GITHUB_OUTPUT
      - name: Package Helm
        run: |
          export APP_VERSION=${{ steps.vars.outputs.tag }}
          export HELM_VERSION=${{ steps.vars.outputs.tag }}
          if [[ ! "$line" =~ ^v ]]
          then
            unset APP_VERSION
            unset HELM_VERSION
          fi
          make helm-package
      - name: Core Image
        run: GOPROXY=direct IMG_TOOL=docker make build-image
      - name: Run e2e
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST: ${{ github.event.number }}
        run: |
          sudo curl -L https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod u+x /usr/local/bin/docker-compose
          make test-e2e
      - name: Operator Image
        run: cd operator && make docker-build

  BuildEmbedUI:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.x
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"
          cache-dependency-path: console/atest-ui/package-lock.json
      - name: Build
        run: |
          TOOLEXEC= make build-embed-ui copy
          sudo atest service install
          sudo atest service restart
      - name: Test
        run: make test-ui
