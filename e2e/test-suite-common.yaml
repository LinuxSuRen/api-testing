#!api-testing
# yaml-language-server: $schema=https://linuxsuren.github.io/api-testing/api-testing-schema.json
# https://docs.gitlab.com/ee/api/api_resources.html
name: atest
api: |
  {{default "http://localhost:8080" (env "SERVER")}}/server.Runner
param:
  suiteName: "{{randAlpha 6}}"
  caseName: "{{randAlpha 6}}"
  gRPCSuiteName: "{{randAlpha 6}}"
  gRPCCaseName: "{{randAlpha 6}}"
  store: "{{randAlpha 3}}"
  server: |
    {{default "http://localhost:8080" (env "SERVER")}}
items:
- name: CreateStore
  before:
    items:
      - httpReady("{{.param.server}}/healthz", 2400)
  request:
    api: /CreateStore
    method: POST
    body: |
      {
        "name": "{{.param.store}}",
        "url": "{{env "target"}}",
        "username": "{{default "root" (env "username")}}",
        "password": "{{default "root" (env "password")}}",
        "kind": {
          "name": "atest-store-{{env "kind"}}"
        },
        "properties": [{
          "key": "driver",
          "value": "{{default "mysql" (env "driver")}}"
        }, {
          "key": "database",
          "value": "{{default "atest" (env "dbname")}}"
        }, {
          "key": "bucket",
          "value": "bucket"
        }, {
          "key": "region",
          "value": "cn"
        }, {
          "key": "disablessl",
          "value": "true"
        }, {
          "key": "targetPath",
          "value": "api-testing"
        }]
      }
- name: createSuite
  before:
    items:
      - sleep(3)
  request:
    api: /CreateTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.suiteName}}",
        "api": "http://localhost:8080/server.Runner"
      }
- name: updateSuite
  request:
    api: /UpdateTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.suiteName}}",
        "api": "http://localhost:8080/server.Runner",
        "param": [{
          "name": "name",
          "value": "linuxsuren"
        }]
      }
- name: getSuite
  request:
    api: /GetTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.suiteName}}"
      }
  expect:
    bodyFieldsExpect:
      api: http://localhost:8080/server.Runner
- name: duplicateSuite
  request:
    api: /DuplicateTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "sourceSuiteName": "{{.param.suiteName}}",
        "targetSuiteName": "{{.param.suiteName}}-copy"
      }
- name: getDuplicatedSuite
  request:
    api: /GetTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.suiteName}}-copy"
      }
  expect:
    bodyFieldsExpect:
      api: http://localhost:8080/server.Runner
- name: GetSuggestedAPIs
  request:
    api: /GetSuggestedAPIs
    method: POST
    body: |
      {
        "name": "{{.param.suiteName}}"
      }
- name: createTestCase
  request:
    api: /CreateTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suiteName": "{{.param.suiteName}}",
        "data": {
          "name": "{{.param.caseName}}",
          "request": {
            "api": "/GetTestSuite",
            "method": "POST",
            "header": [{
              "name": "X-Store-Name",
              "value": "{{.param.store}}"
            }]
          }
        }
      }
- name: updateTestCase
  request:
    api: /UpdateTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suiteName": "{{.param.suiteName}}",
        "data": {
          "name": "{{.param.caseName}}",
          "request": {
            "api": "/GetTestSuite",
            "method": "POST",
            "header": [{
              "name": "X-Store-Name",
              "value": "{{.param.store}}"
            }],
            "body": "good"
          }
        }
      }
- name: getTestCase
  request:
    api: /GetTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suite": "{{.param.suiteName}}",
        "testcase": "{{.param.caseName}}"
      }
  expect:
    bodyFieldsExpect:
      request.body: good
- name: duplicateTestCase
  request:
    api: /DuplicateTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "sourceSuiteName": "{{.param.suiteName}}",
        "sourceCaseName": "{{.param.caseName}}",
        "targetSuiteName": "{{.param.suiteName}}",
        "targetCaseName": "{{.param.caseName}}-copy"
      }
- name: getDuplicatedTestCase
  request:
    api: /GetTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suite": "{{.param.suiteName}}",
        "testcase": "{{.param.caseName}}-copy"
      }
  expect:
    bodyFieldsExpect:
      request.body: good
- name: deleteTestCase
  request:
    api: /DeleteTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suite": "{{.param.suiteName}}",
        "testcase": "{{.param.caseName}}"
      }
- name: createGRPCSuite
  request:
    api: /CreateTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.gRPCSuiteName}}",
        "api": "localhost:7070",
        "kind": "grpc"
      }
- name: createGRPCTestCase
  request:
    api: /CreateTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suiteName": "{{.param.gRPCSuiteName}}",
        "data": {
          "name": "{{.param.gRPCCaseName}}",
          "request": {
            "api": "/server.Runner/GetSuites",
            "header": [{
              "key": "X-Store-Name",
              "value": "{{.param.store}}"
            }]
          }
        }
      }
- name: getGRPCTestCase
  request:
    api: /GetTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suite": "{{.param.gRPCSuiteName}}",
        "testcase": "{{.param.gRPCCaseName}}"
      }
  expect:
    bodyFieldsExpect:
      request.header.0.value: "{{.param.store}}"
- name: runGRPCTestCase
  request:
    api: /RunTestCase
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "suite": "{{.param.gRPCSuiteName}}",
        "testcase": "{{.param.gRPCCaseName}}"
      }
- name: runTestSuite
  request:
    api: /RunTestSuite
    method: POST
    header:
      X-Store-Name: "{{.param.store}}"
    body: |
      {
        "name": "{{.param.gRPCSuiteName}}"
      }
- name: version
  request:
    api: /GetVersion
    method: POST
- name: popularHeaders
  request:
    api: /PopularHeaders
    method: POST
  expect:
    verify:
      - any(data.data, {.key == "Content-Type"})
      - any(data.data, {.key == "Authorization"})
- name: functionsQuery
  request:
    api: /FunctionsQuery
    method: POST
    body: |
      {"name": "rand"}
  expect:
    verify:
      - any(data.data, {.key == "randNumeric"})
      - any(data.data, {.key == "randAlpha"})
      - len(data.data) >= 8
- name: findUnknownFunction
  request:
    api: /FunctionsQuery
    method: POST
    body: |
      {"name": "{{randAlpha 8}}"}
  expect:
    verify:
      - len(data.data) == 0
- name: listCodeGenerator
  request:
    api: /ListCodeGenerator
    method: POST
  expect:
    verify:
      - any(data.data, {.key == "curl"})
      - len(data.data) >= 3

## Other
- name: downloadTool
  request:
    api: |
      {{.param.server}}/get
  expect:
    header:
      Content-Type: application/octet-stream
      Content-Disposition: attachment; filename=atest
      Content-Transfer-Encoding: binary
- name: downloadExtGit
  request:
    api: |
      {{.param.server}}/get
    query:
      name: atest-store-git
  expect:
    header:
      Content-Type: application/octet-stream
      Content-Disposition: attachment; filename=atest-store-git
      Content-Transfer-Encoding: binary
- name: oauth
  request:
    api: |
      {{.param.server}}/oauth2/token
  expect:
    statusCode: 404
- name: debugCmdLine
  request:
    api: |
      {{.param.server}}/debug/pprof/cmdline
- name: favicon
  request:
    api: |
      {{ .param.server }}/favicon.ico
  expect:
    header:
      Content-Type: image/x-icon

## metrics
- name: metrics
  request:
    api: |
      {{.param.server}}/metrics
  expect:
    verify:
      - indexOf(data, "atest_execution_count") != -1
      - indexOf(data, "atest_execution_fail") != -1
      - indexOf(data, "atest_execution_success") != -1
      - indexOf(data, "atest_runners_count") != -1
