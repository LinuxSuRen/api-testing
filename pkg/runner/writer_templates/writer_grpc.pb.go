// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: writer_templates/writer.proto

package writer_templates

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReportWriter_SendReportResult_FullMethodName = "/writer_templates.ReportWriter/SendReportResult"
)

// ReportWriterClient is the client API for ReportWriter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportWriterClient interface {
	SendReportResult(ctx context.Context, in *ReportResultRepeated, opts ...grpc.CallOption) (*Empty, error)
}

type reportWriterClient struct {
	cc grpc.ClientConnInterface
}

func NewReportWriterClient(cc grpc.ClientConnInterface) ReportWriterClient {
	return &reportWriterClient{cc}
}

func (c *reportWriterClient) SendReportResult(ctx context.Context, in *ReportResultRepeated, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ReportWriter_SendReportResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportWriterServer is the server API for ReportWriter service.
// All implementations must embed UnimplementedReportWriterServer
// for forward compatibility
type ReportWriterServer interface {
	SendReportResult(context.Context, *ReportResultRepeated) (*Empty, error)
	mustEmbedUnimplementedReportWriterServer()
}

// UnimplementedReportWriterServer must be embedded to have forward compatible implementations.
type UnimplementedReportWriterServer struct {
}

func (UnimplementedReportWriterServer) SendReportResult(context.Context, *ReportResultRepeated) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReportResult not implemented")
}
func (UnimplementedReportWriterServer) mustEmbedUnimplementedReportWriterServer() {}

// UnsafeReportWriterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportWriterServer will
// result in compilation errors.
type UnsafeReportWriterServer interface {
	mustEmbedUnimplementedReportWriterServer()
}

func RegisterReportWriterServer(s grpc.ServiceRegistrar, srv ReportWriterServer) {
	s.RegisterService(&ReportWriter_ServiceDesc, srv)
}

func _ReportWriter_SendReportResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportResultRepeated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportWriterServer).SendReportResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportWriter_SendReportResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportWriterServer).SendReportResult(ctx, req.(*ReportResultRepeated))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportWriter_ServiceDesc is the grpc.ServiceDesc for ReportWriter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportWriter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "writer_templates.ReportWriter",
	HandlerType: (*ReportWriterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendReportResult",
			Handler:    _ReportWriter_SendReportResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "writer_templates/writer.proto",
}
