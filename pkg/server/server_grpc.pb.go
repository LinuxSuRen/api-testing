// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: pkg/server/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Runner_Run_FullMethodName                  = "/server.Runner/Run"
	Runner_GetSuites_FullMethodName            = "/server.Runner/GetSuites"
	Runner_CreateTestSuite_FullMethodName      = "/server.Runner/CreateTestSuite"
	Runner_ImportTestSuite_FullMethodName      = "/server.Runner/ImportTestSuite"
	Runner_GetTestSuite_FullMethodName         = "/server.Runner/GetTestSuite"
	Runner_UpdateTestSuite_FullMethodName      = "/server.Runner/UpdateTestSuite"
	Runner_DeleteTestSuite_FullMethodName      = "/server.Runner/DeleteTestSuite"
	Runner_ListTestCase_FullMethodName         = "/server.Runner/ListTestCase"
	Runner_GetSuggestedAPIs_FullMethodName     = "/server.Runner/GetSuggestedAPIs"
	Runner_RunTestCase_FullMethodName          = "/server.Runner/RunTestCase"
	Runner_GetTestCase_FullMethodName          = "/server.Runner/GetTestCase"
	Runner_CreateTestCase_FullMethodName       = "/server.Runner/CreateTestCase"
	Runner_UpdateTestCase_FullMethodName       = "/server.Runner/UpdateTestCase"
	Runner_DeleteTestCase_FullMethodName       = "/server.Runner/DeleteTestCase"
	Runner_ListCodeGenerator_FullMethodName    = "/server.Runner/ListCodeGenerator"
	Runner_GenerateCode_FullMethodName         = "/server.Runner/GenerateCode"
	Runner_ListConverter_FullMethodName        = "/server.Runner/ListConverter"
	Runner_ConvertTestSuite_FullMethodName     = "/server.Runner/ConvertTestSuite"
	Runner_PopularHeaders_FullMethodName       = "/server.Runner/PopularHeaders"
	Runner_FunctionsQuery_FullMethodName       = "/server.Runner/FunctionsQuery"
	Runner_FunctionsQueryStream_FullMethodName = "/server.Runner/FunctionsQueryStream"
	Runner_GetVersion_FullMethodName           = "/server.Runner/GetVersion"
	Runner_Sample_FullMethodName               = "/server.Runner/Sample"
	Runner_GetStoreKinds_FullMethodName        = "/server.Runner/GetStoreKinds"
	Runner_GetStores_FullMethodName            = "/server.Runner/GetStores"
	Runner_CreateStore_FullMethodName          = "/server.Runner/CreateStore"
	Runner_UpdateStore_FullMethodName          = "/server.Runner/UpdateStore"
	Runner_DeleteStore_FullMethodName          = "/server.Runner/DeleteStore"
	Runner_VerifyStore_FullMethodName          = "/server.Runner/VerifyStore"
	Runner_GetSecrets_FullMethodName           = "/server.Runner/GetSecrets"
	Runner_CreateSecret_FullMethodName         = "/server.Runner/CreateSecret"
	Runner_DeleteSecret_FullMethodName         = "/server.Runner/DeleteSecret"
	Runner_UpdateSecret_FullMethodName         = "/server.Runner/UpdateSecret"
	Runner_PProf_FullMethodName                = "/server.Runner/PProf"
)

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	// belong to a specific store
	Run(ctx context.Context, in *TestTask, opts ...grpc.CallOption) (*TestResult, error)
	GetSuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Suites, error)
	CreateTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	ImportTestSuite(ctx context.Context, in *TestSuiteSource, opts ...grpc.CallOption) (*CommonResult, error)
	GetTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestSuite, error)
	UpdateTestSuite(ctx context.Context, in *TestSuite, opts ...grpc.CallOption) (*HelloReply, error)
	DeleteTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	// test cases related
	ListTestCase(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*Suite, error)
	GetSuggestedAPIs(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestCases, error)
	RunTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCaseResult, error)
	GetTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCase, error)
	CreateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error)
	UpdateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error)
	DeleteTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	// code generator
	ListCodeGenerator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	GenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error)
	// converter
	ListConverter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	ConvertTestSuite(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error)
	// common services
	PopularHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pairs, error)
	FunctionsQuery(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Pairs, error)
	FunctionsQueryStream(ctx context.Context, opts ...grpc.CallOption) (Runner_FunctionsQueryStreamClient, error)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	Sample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	// stores related interfaces
	GetStoreKinds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoreKinds, error)
	GetStores(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stores, error)
	CreateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	UpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	DeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	VerifyStore(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*ExtensionStatus, error)
	// secret related interfaces
	GetSecrets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Secrets, error)
	CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	DeleteSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	// extension
	PProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfData, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *TestTask, opts ...grpc.CallOption) (*TestResult, error) {
	out := new(TestResult)
	err := c.cc.Invoke(ctx, Runner_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetSuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Suites, error) {
	out := new(Suites)
	err := c.cc.Invoke(ctx, Runner_GetSuites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_CreateTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ImportTestSuite(ctx context.Context, in *TestSuiteSource, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_ImportTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestSuite, error) {
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, Runner_GetTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateTestSuite(ctx context.Context, in *TestSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_UpdateTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListTestCase(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*Suite, error) {
	out := new(Suite)
	err := c.cc.Invoke(ctx, Runner_ListTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetSuggestedAPIs(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestCases, error) {
	out := new(TestCases)
	err := c.cc.Invoke(ctx, Runner_GetSuggestedAPIs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) RunTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCaseResult, error) {
	out := new(TestCaseResult)
	err := c.cc.Invoke(ctx, Runner_RunTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCase, error) {
	out := new(TestCase)
	err := c.cc.Invoke(ctx, Runner_GetTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_CreateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_UpdateTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListCodeGenerator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, Runner_ListCodeGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_GenerateCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListConverter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, Runner_ListConverter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ConvertTestSuite(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_ConvertTestSuite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) PopularHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pairs, error) {
	out := new(Pairs)
	err := c.cc.Invoke(ctx, Runner_PopularHeaders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) FunctionsQuery(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Pairs, error) {
	out := new(Pairs)
	err := c.cc.Invoke(ctx, Runner_FunctionsQuery_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) FunctionsQueryStream(ctx context.Context, opts ...grpc.CallOption) (Runner_FunctionsQueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[0], Runner_FunctionsQueryStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runnerFunctionsQueryStreamClient{stream}
	return x, nil
}

type Runner_FunctionsQueryStreamClient interface {
	Send(*SimpleQuery) error
	Recv() (*Pairs, error)
	grpc.ClientStream
}

type runnerFunctionsQueryStreamClient struct {
	grpc.ClientStream
}

func (x *runnerFunctionsQueryStreamClient) Send(m *SimpleQuery) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runnerFunctionsQueryStreamClient) Recv() (*Pairs, error) {
	m := new(Pairs)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runnerClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Sample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_Sample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetStoreKinds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoreKinds, error) {
	out := new(StoreKinds)
	err := c.cc.Invoke(ctx, Runner_GetStoreKinds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetStores(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Stores, error) {
	out := new(Stores)
	err := c.cc.Invoke(ctx, Runner_GetStores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_CreateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_UpdateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_DeleteStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) VerifyStore(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*ExtensionStatus, error) {
	out := new(ExtensionStatus)
	err := c.cc.Invoke(ctx, Runner_VerifyStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetSecrets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Secrets, error) {
	out := new(Secrets)
	err := c.cc.Invoke(ctx, Runner_GetSecrets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_CreateSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_DeleteSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_UpdateSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) PProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfData, error) {
	out := new(PProfData)
	err := c.cc.Invoke(ctx, Runner_PProf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility
type RunnerServer interface {
	// belong to a specific store
	Run(context.Context, *TestTask) (*TestResult, error)
	GetSuites(context.Context, *Empty) (*Suites, error)
	CreateTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error)
	ImportTestSuite(context.Context, *TestSuiteSource) (*CommonResult, error)
	GetTestSuite(context.Context, *TestSuiteIdentity) (*TestSuite, error)
	UpdateTestSuite(context.Context, *TestSuite) (*HelloReply, error)
	DeleteTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error)
	// test cases related
	ListTestCase(context.Context, *TestSuiteIdentity) (*Suite, error)
	GetSuggestedAPIs(context.Context, *TestSuiteIdentity) (*TestCases, error)
	RunTestCase(context.Context, *TestCaseIdentity) (*TestCaseResult, error)
	GetTestCase(context.Context, *TestCaseIdentity) (*TestCase, error)
	CreateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error)
	UpdateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error)
	DeleteTestCase(context.Context, *TestCaseIdentity) (*HelloReply, error)
	// code generator
	ListCodeGenerator(context.Context, *Empty) (*SimpleList, error)
	GenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error)
	// converter
	ListConverter(context.Context, *Empty) (*SimpleList, error)
	ConvertTestSuite(context.Context, *CodeGenerateRequest) (*CommonResult, error)
	// common services
	PopularHeaders(context.Context, *Empty) (*Pairs, error)
	FunctionsQuery(context.Context, *SimpleQuery) (*Pairs, error)
	FunctionsQueryStream(Runner_FunctionsQueryStreamServer) error
	GetVersion(context.Context, *Empty) (*HelloReply, error)
	Sample(context.Context, *Empty) (*HelloReply, error)
	// stores related interfaces
	GetStoreKinds(context.Context, *Empty) (*StoreKinds, error)
	GetStores(context.Context, *Empty) (*Stores, error)
	CreateStore(context.Context, *Store) (*Store, error)
	UpdateStore(context.Context, *Store) (*Store, error)
	DeleteStore(context.Context, *Store) (*Store, error)
	VerifyStore(context.Context, *SimpleQuery) (*ExtensionStatus, error)
	// secret related interfaces
	GetSecrets(context.Context, *Empty) (*Secrets, error)
	CreateSecret(context.Context, *Secret) (*CommonResult, error)
	DeleteSecret(context.Context, *Secret) (*CommonResult, error)
	UpdateSecret(context.Context, *Secret) (*CommonResult, error)
	// extension
	PProf(context.Context, *PProfRequest) (*PProfData, error)
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (UnimplementedRunnerServer) Run(context.Context, *TestTask) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunnerServer) GetSuites(context.Context, *Empty) (*Suites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuites not implemented")
}
func (UnimplementedRunnerServer) CreateTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestSuite not implemented")
}
func (UnimplementedRunnerServer) ImportTestSuite(context.Context, *TestSuiteSource) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTestSuite not implemented")
}
func (UnimplementedRunnerServer) GetTestSuite(context.Context, *TestSuiteIdentity) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuite not implemented")
}
func (UnimplementedRunnerServer) UpdateTestSuite(context.Context, *TestSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestSuite not implemented")
}
func (UnimplementedRunnerServer) DeleteTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestSuite not implemented")
}
func (UnimplementedRunnerServer) ListTestCase(context.Context, *TestSuiteIdentity) (*Suite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCase not implemented")
}
func (UnimplementedRunnerServer) GetSuggestedAPIs(context.Context, *TestSuiteIdentity) (*TestCases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedAPIs not implemented")
}
func (UnimplementedRunnerServer) RunTestCase(context.Context, *TestCaseIdentity) (*TestCaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTestCase not implemented")
}
func (UnimplementedRunnerServer) GetTestCase(context.Context, *TestCaseIdentity) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCase not implemented")
}
func (UnimplementedRunnerServer) CreateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (UnimplementedRunnerServer) UpdateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCase not implemented")
}
func (UnimplementedRunnerServer) DeleteTestCase(context.Context, *TestCaseIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedRunnerServer) ListCodeGenerator(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeGenerator not implemented")
}
func (UnimplementedRunnerServer) GenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCode not implemented")
}
func (UnimplementedRunnerServer) ListConverter(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConverter not implemented")
}
func (UnimplementedRunnerServer) ConvertTestSuite(context.Context, *CodeGenerateRequest) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTestSuite not implemented")
}
func (UnimplementedRunnerServer) PopularHeaders(context.Context, *Empty) (*Pairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularHeaders not implemented")
}
func (UnimplementedRunnerServer) FunctionsQuery(context.Context, *SimpleQuery) (*Pairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionsQuery not implemented")
}
func (UnimplementedRunnerServer) FunctionsQueryStream(Runner_FunctionsQueryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FunctionsQueryStream not implemented")
}
func (UnimplementedRunnerServer) GetVersion(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRunnerServer) Sample(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sample not implemented")
}
func (UnimplementedRunnerServer) GetStoreKinds(context.Context, *Empty) (*StoreKinds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreKinds not implemented")
}
func (UnimplementedRunnerServer) GetStores(context.Context, *Empty) (*Stores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStores not implemented")
}
func (UnimplementedRunnerServer) CreateStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedRunnerServer) UpdateStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedRunnerServer) DeleteStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedRunnerServer) VerifyStore(context.Context, *SimpleQuery) (*ExtensionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStore not implemented")
}
func (UnimplementedRunnerServer) GetSecrets(context.Context, *Empty) (*Secrets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedRunnerServer) CreateSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedRunnerServer) DeleteSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedRunnerServer) UpdateSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedRunnerServer) PProf(context.Context, *PProfRequest) (*PProfData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PProf not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Run(ctx, req.(*TestTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSuites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSuites(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ImportTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ImportTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ImportTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ImportTestSuite(ctx, req.(*TestSuiteSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateTestSuite(ctx, req.(*TestSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListTestCase(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetSuggestedAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSuggestedAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSuggestedAPIs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSuggestedAPIs(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_RunTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).RunTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_RunTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).RunTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseWithSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateTestCase(ctx, req.(*TestCaseWithSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseWithSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateTestCase(ctx, req.(*TestCaseWithSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListCodeGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListCodeGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListCodeGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListCodeGenerator(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GenerateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GenerateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GenerateCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GenerateCode(ctx, req.(*CodeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListConverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListConverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListConverter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListConverter(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ConvertTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ConvertTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ConvertTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ConvertTestSuite(ctx, req.(*CodeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_PopularHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).PopularHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_PopularHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).PopularHeaders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_FunctionsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).FunctionsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_FunctionsQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).FunctionsQuery(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_FunctionsQueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServer).FunctionsQueryStream(&runnerFunctionsQueryStreamServer{stream})
}

type Runner_FunctionsQueryStreamServer interface {
	Send(*Pairs) error
	Recv() (*SimpleQuery, error)
	grpc.ServerStream
}

type runnerFunctionsQueryStreamServer struct {
	grpc.ServerStream
}

func (x *runnerFunctionsQueryStreamServer) Send(m *Pairs) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runnerFunctionsQueryStreamServer) Recv() (*SimpleQuery, error) {
	m := new(SimpleQuery)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Runner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_Sample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Sample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_Sample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Sample(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetStoreKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetStoreKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetStoreKinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetStoreKinds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetStores(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_VerifyStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).VerifyStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_VerifyStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).VerifyStore(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSecrets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_PProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PProfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).PProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_PProf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).PProf(ctx, req.(*PProfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Runner_Run_Handler,
		},
		{
			MethodName: "GetSuites",
			Handler:    _Runner_GetSuites_Handler,
		},
		{
			MethodName: "CreateTestSuite",
			Handler:    _Runner_CreateTestSuite_Handler,
		},
		{
			MethodName: "ImportTestSuite",
			Handler:    _Runner_ImportTestSuite_Handler,
		},
		{
			MethodName: "GetTestSuite",
			Handler:    _Runner_GetTestSuite_Handler,
		},
		{
			MethodName: "UpdateTestSuite",
			Handler:    _Runner_UpdateTestSuite_Handler,
		},
		{
			MethodName: "DeleteTestSuite",
			Handler:    _Runner_DeleteTestSuite_Handler,
		},
		{
			MethodName: "ListTestCase",
			Handler:    _Runner_ListTestCase_Handler,
		},
		{
			MethodName: "GetSuggestedAPIs",
			Handler:    _Runner_GetSuggestedAPIs_Handler,
		},
		{
			MethodName: "RunTestCase",
			Handler:    _Runner_RunTestCase_Handler,
		},
		{
			MethodName: "GetTestCase",
			Handler:    _Runner_GetTestCase_Handler,
		},
		{
			MethodName: "CreateTestCase",
			Handler:    _Runner_CreateTestCase_Handler,
		},
		{
			MethodName: "UpdateTestCase",
			Handler:    _Runner_UpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _Runner_DeleteTestCase_Handler,
		},
		{
			MethodName: "ListCodeGenerator",
			Handler:    _Runner_ListCodeGenerator_Handler,
		},
		{
			MethodName: "GenerateCode",
			Handler:    _Runner_GenerateCode_Handler,
		},
		{
			MethodName: "ListConverter",
			Handler:    _Runner_ListConverter_Handler,
		},
		{
			MethodName: "ConvertTestSuite",
			Handler:    _Runner_ConvertTestSuite_Handler,
		},
		{
			MethodName: "PopularHeaders",
			Handler:    _Runner_PopularHeaders_Handler,
		},
		{
			MethodName: "FunctionsQuery",
			Handler:    _Runner_FunctionsQuery_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Runner_GetVersion_Handler,
		},
		{
			MethodName: "Sample",
			Handler:    _Runner_Sample_Handler,
		},
		{
			MethodName: "GetStoreKinds",
			Handler:    _Runner_GetStoreKinds_Handler,
		},
		{
			MethodName: "GetStores",
			Handler:    _Runner_GetStores_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _Runner_CreateStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Runner_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Runner_DeleteStore_Handler,
		},
		{
			MethodName: "VerifyStore",
			Handler:    _Runner_VerifyStore_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _Runner_GetSecrets_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Runner_CreateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Runner_DeleteSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Runner_UpdateSecret_Handler,
		},
		{
			MethodName: "PProf",
			Handler:    _Runner_PProf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FunctionsQueryStream",
			Handler:       _Runner_FunctionsQueryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/server/server.proto",
}

const (
	RunnerExtension_Run_FullMethodName = "/server.RunnerExtension/Run"
)

// RunnerExtensionClient is the client API for RunnerExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerExtensionClient interface {
	Run(ctx context.Context, in *TestSuiteWithCase, opts ...grpc.CallOption) (*CommonResult, error)
}

type runnerExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerExtensionClient(cc grpc.ClientConnInterface) RunnerExtensionClient {
	return &runnerExtensionClient{cc}
}

func (c *runnerExtensionClient) Run(ctx context.Context, in *TestSuiteWithCase, opts ...grpc.CallOption) (*CommonResult, error) {
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, RunnerExtension_Run_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerExtensionServer is the server API for RunnerExtension service.
// All implementations must embed UnimplementedRunnerExtensionServer
// for forward compatibility
type RunnerExtensionServer interface {
	Run(context.Context, *TestSuiteWithCase) (*CommonResult, error)
	mustEmbedUnimplementedRunnerExtensionServer()
}

// UnimplementedRunnerExtensionServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerExtensionServer struct {
}

func (UnimplementedRunnerExtensionServer) Run(context.Context, *TestSuiteWithCase) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunnerExtensionServer) mustEmbedUnimplementedRunnerExtensionServer() {}

// UnsafeRunnerExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerExtensionServer will
// result in compilation errors.
type UnsafeRunnerExtensionServer interface {
	mustEmbedUnimplementedRunnerExtensionServer()
}

func RegisterRunnerExtensionServer(s grpc.ServiceRegistrar, srv RunnerExtensionServer) {
	s.RegisterService(&RunnerExtension_ServiceDesc, srv)
}

func _RunnerExtension_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteWithCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerExtensionServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerExtension_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerExtensionServer).Run(ctx, req.(*TestSuiteWithCase))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerExtension_ServiceDesc is the grpc.ServiceDesc for RunnerExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.RunnerExtension",
	HandlerType: (*RunnerExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _RunnerExtension_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}

const (
	Mock_Reload_FullMethodName    = "/server.Mock/Reload"
	Mock_GetConfig_FullMethodName = "/server.Mock/GetConfig"
)

// MockClient is the client API for Mock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockClient interface {
	Reload(ctx context.Context, in *MockConfig, opts ...grpc.CallOption) (*Empty, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MockConfig, error)
}

type mockClient struct {
	cc grpc.ClientConnInterface
}

func NewMockClient(cc grpc.ClientConnInterface) MockClient {
	return &mockClient{cc}
}

func (c *mockClient) Reload(ctx context.Context, in *MockConfig, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mock_Reload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MockConfig, error) {
	out := new(MockConfig)
	err := c.cc.Invoke(ctx, Mock_GetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockServer is the server API for Mock service.
// All implementations must embed UnimplementedMockServer
// for forward compatibility
type MockServer interface {
	Reload(context.Context, *MockConfig) (*Empty, error)
	GetConfig(context.Context, *Empty) (*MockConfig, error)
	mustEmbedUnimplementedMockServer()
}

// UnimplementedMockServer must be embedded to have forward compatible implementations.
type UnimplementedMockServer struct {
}

func (UnimplementedMockServer) Reload(context.Context, *MockConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedMockServer) GetConfig(context.Context, *Empty) (*MockConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMockServer) mustEmbedUnimplementedMockServer() {}

// UnsafeMockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockServer will
// result in compilation errors.
type UnsafeMockServer interface {
	mustEmbedUnimplementedMockServer()
}

func RegisterMockServer(s grpc.ServiceRegistrar, srv MockServer) {
	s.RegisterService(&Mock_ServiceDesc, srv)
}

func _Mock_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mock_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).Reload(ctx, req.(*MockConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mock_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mock_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Mock_ServiceDesc is the grpc.ServiceDesc for Mock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Mock",
	HandlerType: (*MockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reload",
			Handler:    _Mock_Reload_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Mock_GetConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}
