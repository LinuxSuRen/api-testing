// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/server/server.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Runner_Run_FullMethodName                          = "/server.Runner/Run"
	Runner_RunTestSuite_FullMethodName                 = "/server.Runner/RunTestSuite"
	Runner_GetSuites_FullMethodName                    = "/server.Runner/GetSuites"
	Runner_CreateTestSuite_FullMethodName              = "/server.Runner/CreateTestSuite"
	Runner_ImportTestSuite_FullMethodName              = "/server.Runner/ImportTestSuite"
	Runner_GetTestSuite_FullMethodName                 = "/server.Runner/GetTestSuite"
	Runner_UpdateTestSuite_FullMethodName              = "/server.Runner/UpdateTestSuite"
	Runner_DeleteTestSuite_FullMethodName              = "/server.Runner/DeleteTestSuite"
	Runner_DuplicateTestSuite_FullMethodName           = "/server.Runner/DuplicateTestSuite"
	Runner_RenameTestSuite_FullMethodName              = "/server.Runner/RenameTestSuite"
	Runner_GetTestSuiteYaml_FullMethodName             = "/server.Runner/GetTestSuiteYaml"
	Runner_ListTestCase_FullMethodName                 = "/server.Runner/ListTestCase"
	Runner_RunTestCase_FullMethodName                  = "/server.Runner/RunTestCase"
	Runner_BatchRun_FullMethodName                     = "/server.Runner/BatchRun"
	Runner_GetTestCase_FullMethodName                  = "/server.Runner/GetTestCase"
	Runner_CreateTestCase_FullMethodName               = "/server.Runner/CreateTestCase"
	Runner_UpdateTestCase_FullMethodName               = "/server.Runner/UpdateTestCase"
	Runner_DeleteTestCase_FullMethodName               = "/server.Runner/DeleteTestCase"
	Runner_DuplicateTestCase_FullMethodName            = "/server.Runner/DuplicateTestCase"
	Runner_RenameTestCase_FullMethodName               = "/server.Runner/RenameTestCase"
	Runner_GetSuggestedAPIs_FullMethodName             = "/server.Runner/GetSuggestedAPIs"
	Runner_GetHistorySuites_FullMethodName             = "/server.Runner/GetHistorySuites"
	Runner_GetHistoryTestCaseWithResult_FullMethodName = "/server.Runner/GetHistoryTestCaseWithResult"
	Runner_GetHistoryTestCase_FullMethodName           = "/server.Runner/GetHistoryTestCase"
	Runner_DeleteHistoryTestCase_FullMethodName        = "/server.Runner/DeleteHistoryTestCase"
	Runner_DeleteAllHistoryTestCase_FullMethodName     = "/server.Runner/DeleteAllHistoryTestCase"
	Runner_GetTestCaseAllHistory_FullMethodName        = "/server.Runner/GetTestCaseAllHistory"
	Runner_ListCodeGenerator_FullMethodName            = "/server.Runner/ListCodeGenerator"
	Runner_GenerateCode_FullMethodName                 = "/server.Runner/GenerateCode"
	Runner_HistoryGenerateCode_FullMethodName          = "/server.Runner/HistoryGenerateCode"
	Runner_ListConverter_FullMethodName                = "/server.Runner/ListConverter"
	Runner_ConvertTestSuite_FullMethodName             = "/server.Runner/ConvertTestSuite"
	Runner_PopularHeaders_FullMethodName               = "/server.Runner/PopularHeaders"
	Runner_FunctionsQuery_FullMethodName               = "/server.Runner/FunctionsQuery"
	Runner_FunctionsQueryStream_FullMethodName         = "/server.Runner/FunctionsQueryStream"
	Runner_GetSchema_FullMethodName                    = "/server.Runner/GetSchema"
	Runner_GetVersion_FullMethodName                   = "/server.Runner/GetVersion"
	Runner_Sample_FullMethodName                       = "/server.Runner/Sample"
	Runner_DownloadResponseFile_FullMethodName         = "/server.Runner/DownloadResponseFile"
	Runner_GetStoreKinds_FullMethodName                = "/server.Runner/GetStoreKinds"
	Runner_GetStores_FullMethodName                    = "/server.Runner/GetStores"
	Runner_CreateStore_FullMethodName                  = "/server.Runner/CreateStore"
	Runner_UpdateStore_FullMethodName                  = "/server.Runner/UpdateStore"
	Runner_DeleteStore_FullMethodName                  = "/server.Runner/DeleteStore"
	Runner_VerifyStore_FullMethodName                  = "/server.Runner/VerifyStore"
	Runner_GetSecrets_FullMethodName                   = "/server.Runner/GetSecrets"
	Runner_CreateSecret_FullMethodName                 = "/server.Runner/CreateSecret"
	Runner_DeleteSecret_FullMethodName                 = "/server.Runner/DeleteSecret"
	Runner_UpdateSecret_FullMethodName                 = "/server.Runner/UpdateSecret"
	Runner_GenerateSQL_FullMethodName                  = "/server.Runner/GenerateSQL"
	Runner_GetAICapabilities_FullMethodName            = "/server.Runner/GetAICapabilities"
	Runner_ValidateSQL_FullMethodName                  = "/server.Runner/ValidateSQL"
	Runner_PProf_FullMethodName                        = "/server.Runner/PProf"
)

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	// belong to a specific store
	Run(ctx context.Context, in *TestTask, opts ...grpc.CallOption) (*TestResult, error)
	RunTestSuite(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TestSuiteIdentity, TestResult], error)
	// test suites related
	GetSuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Suites, error)
	CreateTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	ImportTestSuite(ctx context.Context, in *TestSuiteSource, opts ...grpc.CallOption) (*CommonResult, error)
	GetTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestSuite, error)
	UpdateTestSuite(ctx context.Context, in *TestSuite, opts ...grpc.CallOption) (*HelloReply, error)
	DeleteTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	DuplicateTestSuite(ctx context.Context, in *TestSuiteDuplicate, opts ...grpc.CallOption) (*HelloReply, error)
	RenameTestSuite(ctx context.Context, in *TestSuiteDuplicate, opts ...grpc.CallOption) (*HelloReply, error)
	GetTestSuiteYaml(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*YamlData, error)
	// test cases related
	ListTestCase(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*Suite, error)
	// run target test case of a specific test suite
	RunTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCaseResult, error)
	BatchRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BatchTestTask, TestResult], error)
	GetTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCase, error)
	CreateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error)
	UpdateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error)
	DeleteTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*HelloReply, error)
	DuplicateTestCase(ctx context.Context, in *TestCaseDuplicate, opts ...grpc.CallOption) (*HelloReply, error)
	RenameTestCase(ctx context.Context, in *TestCaseDuplicate, opts ...grpc.CallOption) (*HelloReply, error)
	GetSuggestedAPIs(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestCases, error)
	// history test related
	GetHistorySuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HistorySuites, error)
	GetHistoryTestCaseWithResult(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HistoryTestResult, error)
	GetHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HistoryTestCase, error)
	DeleteHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HelloReply, error)
	DeleteAllHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HelloReply, error)
	GetTestCaseAllHistory(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*HistoryTestCases, error)
	// code generator
	ListCodeGenerator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	GenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error)
	HistoryGenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error)
	// converter
	ListConverter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	ConvertTestSuite(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error)
	// common services
	PopularHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pairs, error)
	FunctionsQuery(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Pairs, error)
	FunctionsQueryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleQuery, Pairs], error)
	GetSchema(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*CommonResult, error)
	GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error)
	Sample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error)
	DownloadResponseFile(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*FileData, error)
	// stores related interfaces
	GetStoreKinds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoreKinds, error)
	GetStores(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Stores, error)
	CreateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	UpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	DeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error)
	VerifyStore(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*ExtensionStatus, error)
	// secret related interfaces
	GetSecrets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Secrets, error)
	CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	DeleteSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error)
	// AI SQL Generation
	GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error)
	GetAICapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AICapabilitiesResponse, error)
	ValidateSQL(ctx context.Context, in *ValidateSQLRequest, opts ...grpc.CallOption) (*ValidateSQLResponse, error)
	// extension
	PProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfData, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) Run(ctx context.Context, in *TestTask, opts ...grpc.CallOption) (*TestResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResult)
	err := c.cc.Invoke(ctx, Runner_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) RunTestSuite(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TestSuiteIdentity, TestResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[0], Runner_RunTestSuite_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TestSuiteIdentity, TestResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_RunTestSuiteClient = grpc.BidiStreamingClient[TestSuiteIdentity, TestResult]

func (c *runnerClient) GetSuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Suites, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Suites)
	err := c.cc.Invoke(ctx, Runner_GetSuites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_CreateTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ImportTestSuite(ctx context.Context, in *TestSuiteSource, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_ImportTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestSuite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestSuite)
	err := c.cc.Invoke(ctx, Runner_GetTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateTestSuite(ctx context.Context, in *TestSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_UpdateTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteTestSuite(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DuplicateTestSuite(ctx context.Context, in *TestSuiteDuplicate, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DuplicateTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) RenameTestSuite(ctx context.Context, in *TestSuiteDuplicate, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_RenameTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetTestSuiteYaml(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*YamlData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(YamlData)
	err := c.cc.Invoke(ctx, Runner_GetTestSuiteYaml_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListTestCase(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*Suite, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Suite)
	err := c.cc.Invoke(ctx, Runner_ListTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) RunTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCaseResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestCaseResult)
	err := c.cc.Invoke(ctx, Runner_RunTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) BatchRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BatchTestTask, TestResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[1], Runner_BatchRun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BatchTestTask, TestResult]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_BatchRunClient = grpc.BidiStreamingClient[BatchTestTask, TestResult]

func (c *runnerClient) GetTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*TestCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestCase)
	err := c.cc.Invoke(ctx, Runner_GetTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_CreateTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateTestCase(ctx context.Context, in *TestCaseWithSuite, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_UpdateTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteTestCase(ctx context.Context, in *TestCaseIdentity, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DuplicateTestCase(ctx context.Context, in *TestCaseDuplicate, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DuplicateTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) RenameTestCase(ctx context.Context, in *TestCaseDuplicate, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_RenameTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetSuggestedAPIs(ctx context.Context, in *TestSuiteIdentity, opts ...grpc.CallOption) (*TestCases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestCases)
	err := c.cc.Invoke(ctx, Runner_GetSuggestedAPIs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetHistorySuites(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HistorySuites, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistorySuites)
	err := c.cc.Invoke(ctx, Runner_GetHistorySuites_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetHistoryTestCaseWithResult(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HistoryTestResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryTestResult)
	err := c.cc.Invoke(ctx, Runner_GetHistoryTestCaseWithResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HistoryTestCase, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryTestCase)
	err := c.cc.Invoke(ctx, Runner_GetHistoryTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteHistoryTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteAllHistoryTestCase(ctx context.Context, in *HistoryTestCase, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_DeleteAllHistoryTestCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetTestCaseAllHistory(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*HistoryTestCases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HistoryTestCases)
	err := c.cc.Invoke(ctx, Runner_GetTestCaseAllHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListCodeGenerator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, Runner_ListCodeGenerator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_GenerateCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) HistoryGenerateCode(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_HistoryGenerateCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ListConverter(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, Runner_ListConverter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ConvertTestSuite(ctx context.Context, in *CodeGenerateRequest, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_ConvertTestSuite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) PopularHeaders(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pairs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pairs)
	err := c.cc.Invoke(ctx, Runner_PopularHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) FunctionsQuery(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Pairs, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Pairs)
	err := c.cc.Invoke(ctx, Runner_FunctionsQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) FunctionsQueryStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SimpleQuery, Pairs], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Runner_ServiceDesc.Streams[2], Runner_FunctionsQueryStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SimpleQuery, Pairs]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_FunctionsQueryStreamClient = grpc.BidiStreamingClient[SimpleQuery, Pairs]

func (c *runnerClient) GetSchema(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_GetSchema_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetVersion(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Version, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Version)
	err := c.cc.Invoke(ctx, Runner_GetVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) Sample(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, Runner_Sample_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DownloadResponseFile(ctx context.Context, in *TestCase, opts ...grpc.CallOption) (*FileData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileData)
	err := c.cc.Invoke(ctx, Runner_DownloadResponseFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetStoreKinds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoreKinds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoreKinds)
	err := c.cc.Invoke(ctx, Runner_GetStoreKinds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetStores(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*Stores, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Stores)
	err := c.cc.Invoke(ctx, Runner_GetStores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_CreateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_UpdateStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteStore(ctx context.Context, in *Store, opts ...grpc.CallOption) (*Store, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Store)
	err := c.cc.Invoke(ctx, Runner_DeleteStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) VerifyStore(ctx context.Context, in *SimpleQuery, opts ...grpc.CallOption) (*ExtensionStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtensionStatus)
	err := c.cc.Invoke(ctx, Runner_VerifyStore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetSecrets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Secrets, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Secrets)
	err := c.cc.Invoke(ctx, Runner_GetSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) CreateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_CreateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) DeleteSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) UpdateSecret(ctx context.Context, in *Secret, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, Runner_UpdateSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GenerateSQL(ctx context.Context, in *GenerateSQLRequest, opts ...grpc.CallOption) (*GenerateSQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateSQLResponse)
	err := c.cc.Invoke(ctx, Runner_GenerateSQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) GetAICapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AICapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AICapabilitiesResponse)
	err := c.cc.Invoke(ctx, Runner_GetAICapabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) ValidateSQL(ctx context.Context, in *ValidateSQLRequest, opts ...grpc.CallOption) (*ValidateSQLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSQLResponse)
	err := c.cc.Invoke(ctx, Runner_ValidateSQL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) PProf(ctx context.Context, in *PProfRequest, opts ...grpc.CallOption) (*PProfData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PProfData)
	err := c.cc.Invoke(ctx, Runner_PProf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility.
type RunnerServer interface {
	// belong to a specific store
	Run(context.Context, *TestTask) (*TestResult, error)
	RunTestSuite(grpc.BidiStreamingServer[TestSuiteIdentity, TestResult]) error
	// test suites related
	GetSuites(context.Context, *Empty) (*Suites, error)
	CreateTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error)
	ImportTestSuite(context.Context, *TestSuiteSource) (*CommonResult, error)
	GetTestSuite(context.Context, *TestSuiteIdentity) (*TestSuite, error)
	UpdateTestSuite(context.Context, *TestSuite) (*HelloReply, error)
	DeleteTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error)
	DuplicateTestSuite(context.Context, *TestSuiteDuplicate) (*HelloReply, error)
	RenameTestSuite(context.Context, *TestSuiteDuplicate) (*HelloReply, error)
	GetTestSuiteYaml(context.Context, *TestSuiteIdentity) (*YamlData, error)
	// test cases related
	ListTestCase(context.Context, *TestSuiteIdentity) (*Suite, error)
	// run target test case of a specific test suite
	RunTestCase(context.Context, *TestCaseIdentity) (*TestCaseResult, error)
	BatchRun(grpc.BidiStreamingServer[BatchTestTask, TestResult]) error
	GetTestCase(context.Context, *TestCaseIdentity) (*TestCase, error)
	CreateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error)
	UpdateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error)
	DeleteTestCase(context.Context, *TestCaseIdentity) (*HelloReply, error)
	DuplicateTestCase(context.Context, *TestCaseDuplicate) (*HelloReply, error)
	RenameTestCase(context.Context, *TestCaseDuplicate) (*HelloReply, error)
	GetSuggestedAPIs(context.Context, *TestSuiteIdentity) (*TestCases, error)
	// history test related
	GetHistorySuites(context.Context, *Empty) (*HistorySuites, error)
	GetHistoryTestCaseWithResult(context.Context, *HistoryTestCase) (*HistoryTestResult, error)
	GetHistoryTestCase(context.Context, *HistoryTestCase) (*HistoryTestCase, error)
	DeleteHistoryTestCase(context.Context, *HistoryTestCase) (*HelloReply, error)
	DeleteAllHistoryTestCase(context.Context, *HistoryTestCase) (*HelloReply, error)
	GetTestCaseAllHistory(context.Context, *TestCase) (*HistoryTestCases, error)
	// code generator
	ListCodeGenerator(context.Context, *Empty) (*SimpleList, error)
	GenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error)
	HistoryGenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error)
	// converter
	ListConverter(context.Context, *Empty) (*SimpleList, error)
	ConvertTestSuite(context.Context, *CodeGenerateRequest) (*CommonResult, error)
	// common services
	PopularHeaders(context.Context, *Empty) (*Pairs, error)
	FunctionsQuery(context.Context, *SimpleQuery) (*Pairs, error)
	FunctionsQueryStream(grpc.BidiStreamingServer[SimpleQuery, Pairs]) error
	GetSchema(context.Context, *SimpleQuery) (*CommonResult, error)
	GetVersion(context.Context, *Empty) (*Version, error)
	Sample(context.Context, *Empty) (*HelloReply, error)
	DownloadResponseFile(context.Context, *TestCase) (*FileData, error)
	// stores related interfaces
	GetStoreKinds(context.Context, *Empty) (*StoreKinds, error)
	GetStores(context.Context, *SimpleQuery) (*Stores, error)
	CreateStore(context.Context, *Store) (*Store, error)
	UpdateStore(context.Context, *Store) (*Store, error)
	DeleteStore(context.Context, *Store) (*Store, error)
	VerifyStore(context.Context, *SimpleQuery) (*ExtensionStatus, error)
	// secret related interfaces
	GetSecrets(context.Context, *Empty) (*Secrets, error)
	CreateSecret(context.Context, *Secret) (*CommonResult, error)
	DeleteSecret(context.Context, *Secret) (*CommonResult, error)
	UpdateSecret(context.Context, *Secret) (*CommonResult, error)
	// AI SQL Generation
	GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error)
	GetAICapabilities(context.Context, *Empty) (*AICapabilitiesResponse, error)
	ValidateSQL(context.Context, *ValidateSQLRequest) (*ValidateSQLResponse, error)
	// extension
	PProf(context.Context, *PProfRequest) (*PProfData, error)
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerServer struct{}

func (UnimplementedRunnerServer) Run(context.Context, *TestTask) (*TestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunnerServer) RunTestSuite(grpc.BidiStreamingServer[TestSuiteIdentity, TestResult]) error {
	return status.Errorf(codes.Unimplemented, "method RunTestSuite not implemented")
}
func (UnimplementedRunnerServer) GetSuites(context.Context, *Empty) (*Suites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuites not implemented")
}
func (UnimplementedRunnerServer) CreateTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestSuite not implemented")
}
func (UnimplementedRunnerServer) ImportTestSuite(context.Context, *TestSuiteSource) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportTestSuite not implemented")
}
func (UnimplementedRunnerServer) GetTestSuite(context.Context, *TestSuiteIdentity) (*TestSuite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuite not implemented")
}
func (UnimplementedRunnerServer) UpdateTestSuite(context.Context, *TestSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestSuite not implemented")
}
func (UnimplementedRunnerServer) DeleteTestSuite(context.Context, *TestSuiteIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestSuite not implemented")
}
func (UnimplementedRunnerServer) DuplicateTestSuite(context.Context, *TestSuiteDuplicate) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateTestSuite not implemented")
}
func (UnimplementedRunnerServer) RenameTestSuite(context.Context, *TestSuiteDuplicate) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameTestSuite not implemented")
}
func (UnimplementedRunnerServer) GetTestSuiteYaml(context.Context, *TestSuiteIdentity) (*YamlData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestSuiteYaml not implemented")
}
func (UnimplementedRunnerServer) ListTestCase(context.Context, *TestSuiteIdentity) (*Suite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTestCase not implemented")
}
func (UnimplementedRunnerServer) RunTestCase(context.Context, *TestCaseIdentity) (*TestCaseResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunTestCase not implemented")
}
func (UnimplementedRunnerServer) BatchRun(grpc.BidiStreamingServer[BatchTestTask, TestResult]) error {
	return status.Errorf(codes.Unimplemented, "method BatchRun not implemented")
}
func (UnimplementedRunnerServer) GetTestCase(context.Context, *TestCaseIdentity) (*TestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCase not implemented")
}
func (UnimplementedRunnerServer) CreateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestCase not implemented")
}
func (UnimplementedRunnerServer) UpdateTestCase(context.Context, *TestCaseWithSuite) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTestCase not implemented")
}
func (UnimplementedRunnerServer) DeleteTestCase(context.Context, *TestCaseIdentity) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestCase not implemented")
}
func (UnimplementedRunnerServer) DuplicateTestCase(context.Context, *TestCaseDuplicate) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateTestCase not implemented")
}
func (UnimplementedRunnerServer) RenameTestCase(context.Context, *TestCaseDuplicate) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameTestCase not implemented")
}
func (UnimplementedRunnerServer) GetSuggestedAPIs(context.Context, *TestSuiteIdentity) (*TestCases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSuggestedAPIs not implemented")
}
func (UnimplementedRunnerServer) GetHistorySuites(context.Context, *Empty) (*HistorySuites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistorySuites not implemented")
}
func (UnimplementedRunnerServer) GetHistoryTestCaseWithResult(context.Context, *HistoryTestCase) (*HistoryTestResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryTestCaseWithResult not implemented")
}
func (UnimplementedRunnerServer) GetHistoryTestCase(context.Context, *HistoryTestCase) (*HistoryTestCase, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryTestCase not implemented")
}
func (UnimplementedRunnerServer) DeleteHistoryTestCase(context.Context, *HistoryTestCase) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHistoryTestCase not implemented")
}
func (UnimplementedRunnerServer) DeleteAllHistoryTestCase(context.Context, *HistoryTestCase) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllHistoryTestCase not implemented")
}
func (UnimplementedRunnerServer) GetTestCaseAllHistory(context.Context, *TestCase) (*HistoryTestCases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestCaseAllHistory not implemented")
}
func (UnimplementedRunnerServer) ListCodeGenerator(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCodeGenerator not implemented")
}
func (UnimplementedRunnerServer) GenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateCode not implemented")
}
func (UnimplementedRunnerServer) HistoryGenerateCode(context.Context, *CodeGenerateRequest) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryGenerateCode not implemented")
}
func (UnimplementedRunnerServer) ListConverter(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConverter not implemented")
}
func (UnimplementedRunnerServer) ConvertTestSuite(context.Context, *CodeGenerateRequest) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertTestSuite not implemented")
}
func (UnimplementedRunnerServer) PopularHeaders(context.Context, *Empty) (*Pairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopularHeaders not implemented")
}
func (UnimplementedRunnerServer) FunctionsQuery(context.Context, *SimpleQuery) (*Pairs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FunctionsQuery not implemented")
}
func (UnimplementedRunnerServer) FunctionsQueryStream(grpc.BidiStreamingServer[SimpleQuery, Pairs]) error {
	return status.Errorf(codes.Unimplemented, "method FunctionsQueryStream not implemented")
}
func (UnimplementedRunnerServer) GetSchema(context.Context, *SimpleQuery) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (UnimplementedRunnerServer) GetVersion(context.Context, *Empty) (*Version, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRunnerServer) Sample(context.Context, *Empty) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sample not implemented")
}
func (UnimplementedRunnerServer) DownloadResponseFile(context.Context, *TestCase) (*FileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadResponseFile not implemented")
}
func (UnimplementedRunnerServer) GetStoreKinds(context.Context, *Empty) (*StoreKinds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreKinds not implemented")
}
func (UnimplementedRunnerServer) GetStores(context.Context, *SimpleQuery) (*Stores, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStores not implemented")
}
func (UnimplementedRunnerServer) CreateStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedRunnerServer) UpdateStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStore not implemented")
}
func (UnimplementedRunnerServer) DeleteStore(context.Context, *Store) (*Store, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}
func (UnimplementedRunnerServer) VerifyStore(context.Context, *SimpleQuery) (*ExtensionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStore not implemented")
}
func (UnimplementedRunnerServer) GetSecrets(context.Context, *Empty) (*Secrets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecrets not implemented")
}
func (UnimplementedRunnerServer) CreateSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSecret not implemented")
}
func (UnimplementedRunnerServer) DeleteSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedRunnerServer) UpdateSecret(context.Context, *Secret) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSecret not implemented")
}
func (UnimplementedRunnerServer) GenerateSQL(context.Context, *GenerateSQLRequest) (*GenerateSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateSQL not implemented")
}
func (UnimplementedRunnerServer) GetAICapabilities(context.Context, *Empty) (*AICapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAICapabilities not implemented")
}
func (UnimplementedRunnerServer) ValidateSQL(context.Context, *ValidateSQLRequest) (*ValidateSQLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSQL not implemented")
}
func (UnimplementedRunnerServer) PProf(context.Context, *PProfRequest) (*PProfData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PProf not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}
func (UnimplementedRunnerServer) testEmbeddedByValue()                {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	// If the following call pancis, it indicates UnimplementedRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestTask)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Run(ctx, req.(*TestTask))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_RunTestSuite_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServer).RunTestSuite(&grpc.GenericServerStream[TestSuiteIdentity, TestResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_RunTestSuiteServer = grpc.BidiStreamingServer[TestSuiteIdentity, TestResult]

func _Runner_GetSuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSuites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSuites(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ImportTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteSource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ImportTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ImportTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ImportTestSuite(ctx, req.(*TestSuiteSource))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateTestSuite(ctx, req.(*TestSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteTestSuite(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DuplicateTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteDuplicate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DuplicateTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DuplicateTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DuplicateTestSuite(ctx, req.(*TestSuiteDuplicate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_RenameTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteDuplicate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).RenameTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_RenameTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).RenameTestSuite(ctx, req.(*TestSuiteDuplicate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetTestSuiteYaml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestSuiteYaml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestSuiteYaml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestSuiteYaml(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListTestCase(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_RunTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).RunTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_RunTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).RunTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_BatchRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServer).BatchRun(&grpc.GenericServerStream[BatchTestTask, TestResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_BatchRunServer = grpc.BidiStreamingServer[BatchTestTask, TestResult]

func _Runner_GetTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseWithSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateTestCase(ctx, req.(*TestCaseWithSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseWithSuite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateTestCase(ctx, req.(*TestCaseWithSuite))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteTestCase(ctx, req.(*TestCaseIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DuplicateTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseDuplicate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DuplicateTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DuplicateTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DuplicateTestCase(ctx, req.(*TestCaseDuplicate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_RenameTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCaseDuplicate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).RenameTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_RenameTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).RenameTestCase(ctx, req.(*TestCaseDuplicate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetSuggestedAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSuggestedAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSuggestedAPIs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSuggestedAPIs(ctx, req.(*TestSuiteIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetHistorySuites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetHistorySuites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetHistorySuites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetHistorySuites(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetHistoryTestCaseWithResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetHistoryTestCaseWithResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetHistoryTestCaseWithResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetHistoryTestCaseWithResult(ctx, req.(*HistoryTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetHistoryTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetHistoryTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetHistoryTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetHistoryTestCase(ctx, req.(*HistoryTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteHistoryTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteHistoryTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteHistoryTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteHistoryTestCase(ctx, req.(*HistoryTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteAllHistoryTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryTestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteAllHistoryTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteAllHistoryTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteAllHistoryTestCase(ctx, req.(*HistoryTestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetTestCaseAllHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetTestCaseAllHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetTestCaseAllHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetTestCaseAllHistory(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListCodeGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListCodeGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListCodeGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListCodeGenerator(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GenerateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GenerateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GenerateCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GenerateCode(ctx, req.(*CodeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_HistoryGenerateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).HistoryGenerateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_HistoryGenerateCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).HistoryGenerateCode(ctx, req.(*CodeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ListConverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ListConverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ListConverter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ListConverter(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ConvertTestSuite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeGenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ConvertTestSuite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ConvertTestSuite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ConvertTestSuite(ctx, req.(*CodeGenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_PopularHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).PopularHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_PopularHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).PopularHeaders(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_FunctionsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).FunctionsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_FunctionsQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).FunctionsQuery(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_FunctionsQueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunnerServer).FunctionsQueryStream(&grpc.GenericServerStream[SimpleQuery, Pairs]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Runner_FunctionsQueryStreamServer = grpc.BidiStreamingServer[SimpleQuery, Pairs]

func _Runner_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSchema_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSchema(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetVersion(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_Sample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).Sample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_Sample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).Sample(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DownloadResponseFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DownloadResponseFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DownloadResponseFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DownloadResponseFile(ctx, req.(*TestCase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetStoreKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetStoreKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetStoreKinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetStoreKinds(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetStores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetStores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetStores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetStores(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Store)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteStore(ctx, req.(*Store))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_VerifyStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).VerifyStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_VerifyStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).VerifyStore(ctx, req.(*SimpleQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetSecrets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_CreateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).CreateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).DeleteSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_UpdateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Secret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).UpdateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_UpdateSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).UpdateSecret(ctx, req.(*Secret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GenerateSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GenerateSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GenerateSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GenerateSQL(ctx, req.(*GenerateSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_GetAICapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).GetAICapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_GetAICapabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).GetAICapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_ValidateSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ValidateSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_ValidateSQL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ValidateSQL(ctx, req.(*ValidateSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_PProf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PProfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).PProf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Runner_PProf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).PProf(ctx, req.(*PProfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Runner_Run_Handler,
		},
		{
			MethodName: "GetSuites",
			Handler:    _Runner_GetSuites_Handler,
		},
		{
			MethodName: "CreateTestSuite",
			Handler:    _Runner_CreateTestSuite_Handler,
		},
		{
			MethodName: "ImportTestSuite",
			Handler:    _Runner_ImportTestSuite_Handler,
		},
		{
			MethodName: "GetTestSuite",
			Handler:    _Runner_GetTestSuite_Handler,
		},
		{
			MethodName: "UpdateTestSuite",
			Handler:    _Runner_UpdateTestSuite_Handler,
		},
		{
			MethodName: "DeleteTestSuite",
			Handler:    _Runner_DeleteTestSuite_Handler,
		},
		{
			MethodName: "DuplicateTestSuite",
			Handler:    _Runner_DuplicateTestSuite_Handler,
		},
		{
			MethodName: "RenameTestSuite",
			Handler:    _Runner_RenameTestSuite_Handler,
		},
		{
			MethodName: "GetTestSuiteYaml",
			Handler:    _Runner_GetTestSuiteYaml_Handler,
		},
		{
			MethodName: "ListTestCase",
			Handler:    _Runner_ListTestCase_Handler,
		},
		{
			MethodName: "RunTestCase",
			Handler:    _Runner_RunTestCase_Handler,
		},
		{
			MethodName: "GetTestCase",
			Handler:    _Runner_GetTestCase_Handler,
		},
		{
			MethodName: "CreateTestCase",
			Handler:    _Runner_CreateTestCase_Handler,
		},
		{
			MethodName: "UpdateTestCase",
			Handler:    _Runner_UpdateTestCase_Handler,
		},
		{
			MethodName: "DeleteTestCase",
			Handler:    _Runner_DeleteTestCase_Handler,
		},
		{
			MethodName: "DuplicateTestCase",
			Handler:    _Runner_DuplicateTestCase_Handler,
		},
		{
			MethodName: "RenameTestCase",
			Handler:    _Runner_RenameTestCase_Handler,
		},
		{
			MethodName: "GetSuggestedAPIs",
			Handler:    _Runner_GetSuggestedAPIs_Handler,
		},
		{
			MethodName: "GetHistorySuites",
			Handler:    _Runner_GetHistorySuites_Handler,
		},
		{
			MethodName: "GetHistoryTestCaseWithResult",
			Handler:    _Runner_GetHistoryTestCaseWithResult_Handler,
		},
		{
			MethodName: "GetHistoryTestCase",
			Handler:    _Runner_GetHistoryTestCase_Handler,
		},
		{
			MethodName: "DeleteHistoryTestCase",
			Handler:    _Runner_DeleteHistoryTestCase_Handler,
		},
		{
			MethodName: "DeleteAllHistoryTestCase",
			Handler:    _Runner_DeleteAllHistoryTestCase_Handler,
		},
		{
			MethodName: "GetTestCaseAllHistory",
			Handler:    _Runner_GetTestCaseAllHistory_Handler,
		},
		{
			MethodName: "ListCodeGenerator",
			Handler:    _Runner_ListCodeGenerator_Handler,
		},
		{
			MethodName: "GenerateCode",
			Handler:    _Runner_GenerateCode_Handler,
		},
		{
			MethodName: "HistoryGenerateCode",
			Handler:    _Runner_HistoryGenerateCode_Handler,
		},
		{
			MethodName: "ListConverter",
			Handler:    _Runner_ListConverter_Handler,
		},
		{
			MethodName: "ConvertTestSuite",
			Handler:    _Runner_ConvertTestSuite_Handler,
		},
		{
			MethodName: "PopularHeaders",
			Handler:    _Runner_PopularHeaders_Handler,
		},
		{
			MethodName: "FunctionsQuery",
			Handler:    _Runner_FunctionsQuery_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Runner_GetSchema_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Runner_GetVersion_Handler,
		},
		{
			MethodName: "Sample",
			Handler:    _Runner_Sample_Handler,
		},
		{
			MethodName: "DownloadResponseFile",
			Handler:    _Runner_DownloadResponseFile_Handler,
		},
		{
			MethodName: "GetStoreKinds",
			Handler:    _Runner_GetStoreKinds_Handler,
		},
		{
			MethodName: "GetStores",
			Handler:    _Runner_GetStores_Handler,
		},
		{
			MethodName: "CreateStore",
			Handler:    _Runner_CreateStore_Handler,
		},
		{
			MethodName: "UpdateStore",
			Handler:    _Runner_UpdateStore_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _Runner_DeleteStore_Handler,
		},
		{
			MethodName: "VerifyStore",
			Handler:    _Runner_VerifyStore_Handler,
		},
		{
			MethodName: "GetSecrets",
			Handler:    _Runner_GetSecrets_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Runner_CreateSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Runner_DeleteSecret_Handler,
		},
		{
			MethodName: "UpdateSecret",
			Handler:    _Runner_UpdateSecret_Handler,
		},
		{
			MethodName: "GenerateSQL",
			Handler:    _Runner_GenerateSQL_Handler,
		},
		{
			MethodName: "GetAICapabilities",
			Handler:    _Runner_GetAICapabilities_Handler,
		},
		{
			MethodName: "ValidateSQL",
			Handler:    _Runner_ValidateSQL_Handler,
		},
		{
			MethodName: "PProf",
			Handler:    _Runner_PProf_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunTestSuite",
			Handler:       _Runner_RunTestSuite_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "BatchRun",
			Handler:       _Runner_BatchRun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "FunctionsQueryStream",
			Handler:       _Runner_FunctionsQueryStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/server/server.proto",
}

const (
	RunnerExtension_Run_FullMethodName = "/server.RunnerExtension/Run"
)

// RunnerExtensionClient is the client API for RunnerExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerExtensionClient interface {
	Run(ctx context.Context, in *TestSuiteWithCase, opts ...grpc.CallOption) (*CommonResult, error)
}

type runnerExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerExtensionClient(cc grpc.ClientConnInterface) RunnerExtensionClient {
	return &runnerExtensionClient{cc}
}

func (c *runnerExtensionClient) Run(ctx context.Context, in *TestSuiteWithCase, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, RunnerExtension_Run_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerExtensionServer is the server API for RunnerExtension service.
// All implementations must embed UnimplementedRunnerExtensionServer
// for forward compatibility.
type RunnerExtensionServer interface {
	Run(context.Context, *TestSuiteWithCase) (*CommonResult, error)
	mustEmbedUnimplementedRunnerExtensionServer()
}

// UnimplementedRunnerExtensionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRunnerExtensionServer struct{}

func (UnimplementedRunnerExtensionServer) Run(context.Context, *TestSuiteWithCase) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedRunnerExtensionServer) mustEmbedUnimplementedRunnerExtensionServer() {}
func (UnimplementedRunnerExtensionServer) testEmbeddedByValue()                         {}

// UnsafeRunnerExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerExtensionServer will
// result in compilation errors.
type UnsafeRunnerExtensionServer interface {
	mustEmbedUnimplementedRunnerExtensionServer()
}

func RegisterRunnerExtensionServer(s grpc.ServiceRegistrar, srv RunnerExtensionServer) {
	// If the following call pancis, it indicates UnimplementedRunnerExtensionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RunnerExtension_ServiceDesc, srv)
}

func _RunnerExtension_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestSuiteWithCase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerExtensionServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RunnerExtension_Run_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerExtensionServer).Run(ctx, req.(*TestSuiteWithCase))
	}
	return interceptor(ctx, in, info, handler)
}

// RunnerExtension_ServiceDesc is the grpc.ServiceDesc for RunnerExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RunnerExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.RunnerExtension",
	HandlerType: (*RunnerExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _RunnerExtension_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}

const (
	UIExtension_GetMenus_FullMethodName        = "/server.UIExtension/GetMenus"
	UIExtension_GetPageOfJS_FullMethodName     = "/server.UIExtension/GetPageOfJS"
	UIExtension_GetPageOfCSS_FullMethodName    = "/server.UIExtension/GetPageOfCSS"
	UIExtension_GetPageOfStatic_FullMethodName = "/server.UIExtension/GetPageOfStatic"
)

// UIExtensionClient is the client API for UIExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UIExtensionClient interface {
	GetMenus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuList, error)
	GetPageOfJS(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error)
	GetPageOfCSS(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error)
	GetPageOfStatic(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error)
}

type uIExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewUIExtensionClient(cc grpc.ClientConnInterface) UIExtensionClient {
	return &uIExtensionClient{cc}
}

func (c *uIExtensionClient) GetMenus(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MenuList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuList)
	err := c.cc.Invoke(ctx, UIExtension_GetMenus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIExtensionClient) GetPageOfJS(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, UIExtension_GetPageOfJS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIExtensionClient) GetPageOfCSS(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, UIExtension_GetPageOfCSS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIExtensionClient) GetPageOfStatic(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, UIExtension_GetPageOfStatic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIExtensionServer is the server API for UIExtension service.
// All implementations must embed UnimplementedUIExtensionServer
// for forward compatibility.
type UIExtensionServer interface {
	GetMenus(context.Context, *Empty) (*MenuList, error)
	GetPageOfJS(context.Context, *SimpleName) (*CommonResult, error)
	GetPageOfCSS(context.Context, *SimpleName) (*CommonResult, error)
	GetPageOfStatic(context.Context, *SimpleName) (*CommonResult, error)
	mustEmbedUnimplementedUIExtensionServer()
}

// UnimplementedUIExtensionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUIExtensionServer struct{}

func (UnimplementedUIExtensionServer) GetMenus(context.Context, *Empty) (*MenuList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenus not implemented")
}
func (UnimplementedUIExtensionServer) GetPageOfJS(context.Context, *SimpleName) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageOfJS not implemented")
}
func (UnimplementedUIExtensionServer) GetPageOfCSS(context.Context, *SimpleName) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageOfCSS not implemented")
}
func (UnimplementedUIExtensionServer) GetPageOfStatic(context.Context, *SimpleName) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPageOfStatic not implemented")
}
func (UnimplementedUIExtensionServer) mustEmbedUnimplementedUIExtensionServer() {}
func (UnimplementedUIExtensionServer) testEmbeddedByValue()                     {}

// UnsafeUIExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UIExtensionServer will
// result in compilation errors.
type UnsafeUIExtensionServer interface {
	mustEmbedUnimplementedUIExtensionServer()
}

func RegisterUIExtensionServer(s grpc.ServiceRegistrar, srv UIExtensionServer) {
	// If the following call pancis, it indicates UnimplementedUIExtensionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UIExtension_ServiceDesc, srv)
}

func _UIExtension_GetMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIExtensionServer).GetMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UIExtension_GetMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIExtensionServer).GetMenus(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIExtension_GetPageOfJS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIExtensionServer).GetPageOfJS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UIExtension_GetPageOfJS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIExtensionServer).GetPageOfJS(ctx, req.(*SimpleName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIExtension_GetPageOfCSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIExtensionServer).GetPageOfCSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UIExtension_GetPageOfCSS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIExtensionServer).GetPageOfCSS(ctx, req.(*SimpleName))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIExtension_GetPageOfStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIExtensionServer).GetPageOfStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UIExtension_GetPageOfStatic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIExtensionServer).GetPageOfStatic(ctx, req.(*SimpleName))
	}
	return interceptor(ctx, in, info, handler)
}

// UIExtension_ServiceDesc is the grpc.ServiceDesc for UIExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UIExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.UIExtension",
	HandlerType: (*UIExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenus",
			Handler:    _UIExtension_GetMenus_Handler,
		},
		{
			MethodName: "GetPageOfJS",
			Handler:    _UIExtension_GetPageOfJS_Handler,
		},
		{
			MethodName: "GetPageOfCSS",
			Handler:    _UIExtension_GetPageOfCSS_Handler,
		},
		{
			MethodName: "GetPageOfStatic",
			Handler:    _UIExtension_GetPageOfStatic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}

const (
	ThemeExtension_GetThemes_FullMethodName   = "/server.ThemeExtension/GetThemes"
	ThemeExtension_GetTheme_FullMethodName    = "/server.ThemeExtension/GetTheme"
	ThemeExtension_GetBindings_FullMethodName = "/server.ThemeExtension/GetBindings"
	ThemeExtension_GetBinding_FullMethodName  = "/server.ThemeExtension/GetBinding"
)

// ThemeExtensionClient is the client API for ThemeExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThemeExtensionClient interface {
	GetThemes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	GetTheme(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error)
	GetBindings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error)
	GetBinding(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error)
}

type themeExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewThemeExtensionClient(cc grpc.ClientConnInterface) ThemeExtensionClient {
	return &themeExtensionClient{cc}
}

func (c *themeExtensionClient) GetThemes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, ThemeExtension_GetThemes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *themeExtensionClient) GetTheme(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, ThemeExtension_GetTheme_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *themeExtensionClient) GetBindings(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SimpleList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SimpleList)
	err := c.cc.Invoke(ctx, ThemeExtension_GetBindings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *themeExtensionClient) GetBinding(ctx context.Context, in *SimpleName, opts ...grpc.CallOption) (*CommonResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResult)
	err := c.cc.Invoke(ctx, ThemeExtension_GetBinding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThemeExtensionServer is the server API for ThemeExtension service.
// All implementations must embed UnimplementedThemeExtensionServer
// for forward compatibility.
type ThemeExtensionServer interface {
	GetThemes(context.Context, *Empty) (*SimpleList, error)
	GetTheme(context.Context, *SimpleName) (*CommonResult, error)
	GetBindings(context.Context, *Empty) (*SimpleList, error)
	GetBinding(context.Context, *SimpleName) (*CommonResult, error)
	mustEmbedUnimplementedThemeExtensionServer()
}

// UnimplementedThemeExtensionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThemeExtensionServer struct{}

func (UnimplementedThemeExtensionServer) GetThemes(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThemes not implemented")
}
func (UnimplementedThemeExtensionServer) GetTheme(context.Context, *SimpleName) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTheme not implemented")
}
func (UnimplementedThemeExtensionServer) GetBindings(context.Context, *Empty) (*SimpleList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBindings not implemented")
}
func (UnimplementedThemeExtensionServer) GetBinding(context.Context, *SimpleName) (*CommonResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinding not implemented")
}
func (UnimplementedThemeExtensionServer) mustEmbedUnimplementedThemeExtensionServer() {}
func (UnimplementedThemeExtensionServer) testEmbeddedByValue()                        {}

// UnsafeThemeExtensionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThemeExtensionServer will
// result in compilation errors.
type UnsafeThemeExtensionServer interface {
	mustEmbedUnimplementedThemeExtensionServer()
}

func RegisterThemeExtensionServer(s grpc.ServiceRegistrar, srv ThemeExtensionServer) {
	// If the following call pancis, it indicates UnimplementedThemeExtensionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThemeExtension_ServiceDesc, srv)
}

func _ThemeExtension_GetThemes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemeExtensionServer).GetThemes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThemeExtension_GetThemes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemeExtensionServer).GetThemes(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThemeExtension_GetTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemeExtensionServer).GetTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThemeExtension_GetTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemeExtensionServer).GetTheme(ctx, req.(*SimpleName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThemeExtension_GetBindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemeExtensionServer).GetBindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThemeExtension_GetBindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemeExtensionServer).GetBindings(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThemeExtension_GetBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThemeExtensionServer).GetBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThemeExtension_GetBinding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThemeExtensionServer).GetBinding(ctx, req.(*SimpleName))
	}
	return interceptor(ctx, in, info, handler)
}

// ThemeExtension_ServiceDesc is the grpc.ServiceDesc for ThemeExtension service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThemeExtension_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.ThemeExtension",
	HandlerType: (*ThemeExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThemes",
			Handler:    _ThemeExtension_GetThemes_Handler,
		},
		{
			MethodName: "GetTheme",
			Handler:    _ThemeExtension_GetTheme_Handler,
		},
		{
			MethodName: "GetBindings",
			Handler:    _ThemeExtension_GetBindings_Handler,
		},
		{
			MethodName: "GetBinding",
			Handler:    _ThemeExtension_GetBinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}

const (
	Mock_Reload_FullMethodName    = "/server.Mock/Reload"
	Mock_GetConfig_FullMethodName = "/server.Mock/GetConfig"
	Mock_LogWatch_FullMethodName  = "/server.Mock/LogWatch"
)

// MockClient is the client API for Mock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MockClient interface {
	Reload(ctx context.Context, in *MockConfig, opts ...grpc.CallOption) (*Empty, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MockConfig, error)
	LogWatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommonResult], error)
}

type mockClient struct {
	cc grpc.ClientConnInterface
}

func NewMockClient(cc grpc.ClientConnInterface) MockClient {
	return &mockClient{cc}
}

func (c *mockClient) Reload(ctx context.Context, in *MockConfig, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mock_Reload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MockConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MockConfig)
	err := c.cc.Invoke(ctx, Mock_GetConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mockClient) LogWatch(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CommonResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Mock_ServiceDesc.Streams[0], Mock_LogWatch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, CommonResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Mock_LogWatchClient = grpc.ServerStreamingClient[CommonResult]

// MockServer is the server API for Mock service.
// All implementations must embed UnimplementedMockServer
// for forward compatibility.
type MockServer interface {
	Reload(context.Context, *MockConfig) (*Empty, error)
	GetConfig(context.Context, *Empty) (*MockConfig, error)
	LogWatch(*Empty, grpc.ServerStreamingServer[CommonResult]) error
	mustEmbedUnimplementedMockServer()
}

// UnimplementedMockServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMockServer struct{}

func (UnimplementedMockServer) Reload(context.Context, *MockConfig) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedMockServer) GetConfig(context.Context, *Empty) (*MockConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedMockServer) LogWatch(*Empty, grpc.ServerStreamingServer[CommonResult]) error {
	return status.Errorf(codes.Unimplemented, "method LogWatch not implemented")
}
func (UnimplementedMockServer) mustEmbedUnimplementedMockServer() {}
func (UnimplementedMockServer) testEmbeddedByValue()              {}

// UnsafeMockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MockServer will
// result in compilation errors.
type UnsafeMockServer interface {
	mustEmbedUnimplementedMockServer()
}

func RegisterMockServer(s grpc.ServiceRegistrar, srv MockServer) {
	// If the following call pancis, it indicates UnimplementedMockServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Mock_ServiceDesc, srv)
}

func _Mock_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mock_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).Reload(ctx, req.(*MockConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mock_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mock_GetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mock_LogWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MockServer).LogWatch(m, &grpc.GenericServerStream[Empty, CommonResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Mock_LogWatchServer = grpc.ServerStreamingServer[CommonResult]

// Mock_ServiceDesc is the grpc.ServiceDesc for Mock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Mock",
	HandlerType: (*MockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reload",
			Handler:    _Mock_Reload_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Mock_GetConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LogWatch",
			Handler:       _Mock_LogWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/server/server.proto",
}

const (
	DataServer_Query_FullMethodName = "/server.DataServer/Query"
)

// DataServerClient is the client API for DataServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServerClient interface {
	Query(ctx context.Context, in *DataQuery, opts ...grpc.CallOption) (*DataQueryResult, error)
}

type dataServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServerClient(cc grpc.ClientConnInterface) DataServerClient {
	return &dataServerClient{cc}
}

func (c *dataServerClient) Query(ctx context.Context, in *DataQuery, opts ...grpc.CallOption) (*DataQueryResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataQueryResult)
	err := c.cc.Invoke(ctx, DataServer_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataServerServer is the server API for DataServer service.
// All implementations must embed UnimplementedDataServerServer
// for forward compatibility.
type DataServerServer interface {
	Query(context.Context, *DataQuery) (*DataQueryResult, error)
	mustEmbedUnimplementedDataServerServer()
}

// UnimplementedDataServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServerServer struct{}

func (UnimplementedDataServerServer) Query(context.Context, *DataQuery) (*DataQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDataServerServer) mustEmbedUnimplementedDataServerServer() {}
func (UnimplementedDataServerServer) testEmbeddedByValue()                    {}

// UnsafeDataServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServerServer will
// result in compilation errors.
type UnsafeDataServerServer interface {
	mustEmbedUnimplementedDataServerServer()
}

func RegisterDataServerServer(s grpc.ServiceRegistrar, srv DataServerServer) {
	// If the following call pancis, it indicates UnimplementedDataServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataServer_ServiceDesc, srv)
}

func _DataServer_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServerServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataServer_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServerServer).Query(ctx, req.(*DataQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DataServer_ServiceDesc is the grpc.ServiceDesc for DataServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.DataServer",
	HandlerType: (*DataServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _DataServer_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/server/server.proto",
}
