syntax = "proto3";

option go_package = "github.com/linuxsuren/api-testing/pkg/testing/remote";

package remote;

import "pkg/server/server.proto";

service Loader {
    rpc ListTestSuite(server.Empty) returns (TestSuites) {}
    rpc CreateTestSuite(TestSuite) returns (server.Empty) {}
    rpc GetTestSuite(TestSuite) returns (TestSuite) {}
    rpc UpdateTestSuite(TestSuite) returns (TestSuite) {}
    rpc DeleteTestSuite(TestSuite) returns (server.Empty) {}

    rpc ListTestCases(TestSuite) returns (server.TestCases) {}
    rpc CreateTestCase(server.TestCase) returns (server.Empty) {}
    rpc GetTestCase(server.TestCase) returns (server.TestCase) {}
    rpc UpdateTestCase(server.TestCase) returns (server.TestCase) {}
    rpc DeleteTestCase(server.TestCase) returns (server.Empty) {}

    rpc ListHistoryTestSuite(server.Empty) returns (HistoryTestSuites) {}
    rpc CreateTestCaseHistory(server.HistoryTestResult) returns (server.Empty) {}
    rpc GetHistoryTestCaseWithResult(server.HistoryTestCase) returns (server.HistoryTestResult) {}
    rpc GetHistoryTestCase(server.HistoryTestCase) returns (server.HistoryTestCase) {}
    rpc DeleteHistoryTestCase(server.HistoryTestCase) returns (server.Empty) {}
    rpc GetTestCaseAllHistory(server.TestCase) returns (server.HistoryTestCases) {}

    rpc GetVersion(server.Empty) returns (server.Version) {}
    rpc Verify(server.Empty) returns (server.ExtensionStatus) {}
    rpc PProf(server.PProfRequest) returns (server.PProfData) {}
}

message TestSuites {
    repeated TestSuite data = 1;
}

message TestSuite {
    string name = 1;
    string api = 2;
    repeated server.Pair param = 3;
    server.APISpec spec = 4;
    repeated server.TestCase items = 5;
    bool full = 6;
}

message HistoryTestSuites {
    repeated HistoryTestSuite data = 1;
}

message HistoryTestSuite {
    string historySuiteName = 1;
    repeated server.HistoryTestCase items =2;
}

service SecretService {
    rpc GetSecret(server.Secret) returns (server.Secret) {}
    rpc GetSecrets(server.Empty) returns (server.Secrets) {}
    rpc CreateSecret(server.Secret) returns (server.CommonResult) {}
    rpc DeleteSecret(server.Secret) returns (server.CommonResult) {}
    rpc UpdateSecret(server.Secret) returns (server.CommonResult) {}
}

service ConfigService {
    rpc GetConfigs(server.Empty) returns (Configs) {}
    rpc GetConfig(server.SimpleName) returns (Config) {}
    rpc CreateConfig(Config) returns (server.CommonResult) {}
    rpc UpdateConfig(Config) returns (server.CommonResult) {}
    rpc DeleteConfig(server.SimpleName) returns (server.CommonResult) {}
}

message Configs {
    repeated Config data = 1;
}

message Config {
    string name = 1;
    string value = 2;
    string description = 3;
}
