/**
 * @fileoverview gRPC-Web generated client stub for server
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: server.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as server_pb from './server_pb';


export class RunnerClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRun = new grpcWeb.MethodDescriptor(
    '/server.Runner/Run',
    grpcWeb.MethodType.UNARY,
    server_pb.TestTask,
    server_pb.HelloReply,
    (request: server_pb.TestTask) => {
      return request.serializeBinary();
    },
    server_pb.HelloReply.deserializeBinary
  );

  run(
    request: server_pb.TestTask,
    metadata: grpcWeb.Metadata | null): Promise<server_pb.HelloReply>;

  run(
    request: server_pb.TestTask,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void): grpcWeb.ClientReadableStream<server_pb.HelloReply>;

  run(
    request: server_pb.TestTask,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/server.Runner/Run',
        request,
        metadata || {},
        this.methodDescriptorRun,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/server.Runner/Run',
    request,
    metadata || {},
    this.methodDescriptorRun);
  }

  methodDescriptorSample = new grpcWeb.MethodDescriptor(
    '/server.Runner/Sample',
    grpcWeb.MethodType.UNARY,
    server_pb.Empty,
    server_pb.HelloReply,
    (request: server_pb.Empty) => {
      return request.serializeBinary();
    },
    server_pb.HelloReply.deserializeBinary
  );

  sample(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<server_pb.HelloReply>;

  sample(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void): grpcWeb.ClientReadableStream<server_pb.HelloReply>;

  sample(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/server.Runner/Sample',
        request,
        metadata || {},
        this.methodDescriptorSample,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/server.Runner/Sample',
    request,
    metadata || {},
    this.methodDescriptorSample);
  }

  methodDescriptorGetVersion = new grpcWeb.MethodDescriptor(
    '/server.Runner/GetVersion',
    grpcWeb.MethodType.UNARY,
    server_pb.Empty,
    server_pb.HelloReply,
    (request: server_pb.Empty) => {
      return request.serializeBinary();
    },
    server_pb.HelloReply.deserializeBinary
  );

  getVersion(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null): Promise<server_pb.HelloReply>;

  getVersion(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void): grpcWeb.ClientReadableStream<server_pb.HelloReply>;

  getVersion(
    request: server_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: server_pb.HelloReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/server.Runner/GetVersion',
        request,
        metadata || {},
        this.methodDescriptorGetVersion,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/server.Runner/GetVersion',
    request,
    metadata || {},
    this.methodDescriptorGetVersion);
  }

}

